{"ast":null,"code":"import axios from 'axios';\nexport const getAllPizzas = () => async dispatch => {\n  dispatch({\n    type: 'GET_PIZZAS_REQUEST'\n  });\n\n  try {\n    const response = await axios.get('/api/pizzas/getallpizzas');\n    console.log(response);\n    dispatch({\n      type: 'GET_PIZZAS_SUCCESS',\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'GET_PIZZAS_FAILED',\n      payload: error\n    });\n  }\n};\nexport const getPizzaById = pizza => async dispatch => {\n  dispatch({\n    type: 'GET_PIZZABYID_REQUEST'\n  });\n\n  try {\n    const response = await axios.get('/api/pizzas/getpizzabyid');\n    console.log(response);\n    dispatch({\n      type: 'GET_PIZZABYID_SUCCESS',\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'GET_PIZZABYID_FAILED',\n      payload: error\n    });\n  }\n};\nexport const filterPizzas = (searchkey, category) => async dispatch => {\n  var filteredPizzas;\n  dispatch({\n    type: 'GET_PIZZAS_REQUEST'\n  });\n\n  try {\n    const response = await axios.get('/api/pizzas/getallpizzas');\n    filteredPizzas = response.data.filter(pizza => pizza.name.toLowerCase().includes(searchkey));\n\n    if (category != 'all') {\n      filteredPizzas = response.data.filter(pizza => pizza.category.toLowerCase() == category);\n    }\n\n    dispatch({\n      type: 'GET_PIZZAS_SUCCESS',\n      payload: filteredPizzas\n    });\n  } catch (error) {\n    dispatch({\n      type: 'GET_PIZZAS_FAILED',\n      payload: error\n    });\n  }\n};\nexport const addPizza = pizza => async dispatch => {\n  dispatch({\n    type: 'Add_PIZZA_REQUEST'\n  });\n\n  try {\n    const response = await axios.post('/api/pizzas/addpizza', {\n      pizza\n    });\n    console.log(response);\n    dispatch({\n      type: 'Add_PIZZA_SUCCESS'\n    });\n  } catch (error) {\n    dispatch({\n      type: 'Add_PIZZA_FAILED',\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["D:/Pizza-Valley/Admin-Panel/dashboard/src/actions/pizzaActions.js"],"names":["axios","getAllPizzas","dispatch","type","response","get","console","log","payload","data","error","getPizzaById","pizza","filterPizzas","searchkey","category","filteredPizzas","filter","name","toLowerCase","includes","addPizza","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAEhDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAR;;AAEA,MAAI;AAEA,UAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAU,0BAAV,CAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,oBAAR;AAA8BK,MAAAA,OAAO,EAAEJ,QAAQ,CAACK;AAAhD,KAAD,CAAR;AAEH,GAND,CAME,OAAOC,KAAP,EAAc;AAEZR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,mBAAR;AAA6BK,MAAAA,OAAO,EAAEE;AAAtC,KAAD,CAAR;AACH;AAEJ,CAfM;AAoBP,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAW,MAAMV,QAAN,IAAkB;AAErDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAR;;AAEA,MAAI;AAEA,UAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAU,0BAAV,CAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,uBAAR;AAAiCK,MAAAA,OAAO,EAAEJ,QAAQ,CAACK;AAAnD,KAAD,CAAR;AAEH,GAND,CAME,OAAOC,KAAP,EAAc;AAEZR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,sBAAR;AAAgCK,MAAAA,OAAO,EAAEE;AAAzC,KAAD,CAAR;AACH;AAEJ,CAfM;AAkBP,OAAO,MAAMG,YAAY,GAAG,CAACC,SAAD,EAAYC,QAAZ,KAAyB,MAAMb,QAAN,IAAkB;AAEnE,MAAIc,cAAJ;AACAd,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAR;;AAEA,MAAI;AAEA,UAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAU,0BAAV,CAAvB;AACAW,IAAAA,cAAc,GAAGZ,QAAQ,CAACK,IAAT,CAAcQ,MAAd,CAAqBL,KAAK,IAAIA,KAAK,CAACM,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCN,SAAlC,CAA9B,CAAjB;;AAEA,QAAIC,QAAQ,IAAI,KAAhB,EAAuB;AACnBC,MAAAA,cAAc,GAAGZ,QAAQ,CAACK,IAAT,CAAcQ,MAAd,CAAqBL,KAAK,IAAIA,KAAK,CAACG,QAAN,CAAeI,WAAf,MAAgCJ,QAA9D,CAAjB;AACH;;AAEDb,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,oBAAR;AAA8BK,MAAAA,OAAO,EAAEQ;AAAvC,KAAD,CAAR;AAEH,GAXD,CAWE,OAAON,KAAP,EAAc;AAEZR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,mBAAR;AAA6BK,MAAAA,OAAO,EAAEE;AAAtC,KAAD,CAAR;AACH;AACJ,CApBM;AAwBP,OAAO,MAAMW,QAAQ,GAAIT,KAAD,IAAW,MAAMV,QAAN,IAAkB;AACjDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAR;;AACA,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACsB,IAAN,CAAW,sBAAX,EAAmC;AAAEV,MAAAA;AAAF,KAAnC,CAAvB;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACH,GAJD,CAIE,OAAOO,KAAP,EAAc;AACZR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,kBAAR;AAA4BK,MAAAA,OAAO,EAAGE;AAAtC,KAAD,CAAR;AAGH;AACJ,CAXM","sourcesContent":["import axios from 'axios';\r\nexport const getAllPizzas = () => async dispatch => {\r\n\r\n    dispatch({ type: 'GET_PIZZAS_REQUEST' })\r\n\r\n    try {\r\n\r\n        const response = await axios.get('/api/pizzas/getallpizzas')\r\n        console.log(response)\r\n        dispatch({ type: 'GET_PIZZAS_SUCCESS', payload: response.data })\r\n\r\n    } catch (error) {\r\n\r\n        dispatch({ type: 'GET_PIZZAS_FAILED', payload: error })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport const getPizzaById = (pizza) => async dispatch => {\r\n\r\n    dispatch({ type: 'GET_PIZZABYID_REQUEST' })\r\n\r\n    try {\r\n\r\n        const response = await axios.get('/api/pizzas/getpizzabyid')\r\n        console.log(response)\r\n        dispatch({ type: 'GET_PIZZABYID_SUCCESS', payload: response.data })\r\n\r\n    } catch (error) {\r\n\r\n        dispatch({ type: 'GET_PIZZABYID_FAILED', payload: error })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const filterPizzas = (searchkey, category) => async dispatch => {\r\n\r\n    var filteredPizzas;\r\n    dispatch({ type: 'GET_PIZZAS_REQUEST' })\r\n\r\n    try {\r\n\r\n        const response = await axios.get('/api/pizzas/getallpizzas')\r\n        filteredPizzas = response.data.filter(pizza => pizza.name.toLowerCase().includes(searchkey))\r\n\r\n        if (category != 'all') {\r\n            filteredPizzas = response.data.filter(pizza => pizza.category.toLowerCase() == category)\r\n        }\r\n\r\n        dispatch({ type: 'GET_PIZZAS_SUCCESS', payload: filteredPizzas })\r\n\r\n    } catch (error) {\r\n\r\n        dispatch({ type: 'GET_PIZZAS_FAILED', payload: error })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const addPizza = (pizza) => async dispatch => {\r\n    dispatch({ type: 'Add_PIZZA_REQUEST' })\r\n    try {\r\n        const response = await axios.post('/api/pizzas/addpizza', { pizza })\r\n        console.log(response)\r\n        dispatch({ type: 'Add_PIZZA_SUCCESS' })\r\n    } catch (error) {\r\n        dispatch({ type: 'Add_PIZZA_FAILED', payload : error })\r\n\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}